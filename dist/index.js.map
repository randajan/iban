{
  "version": 3,
  "sources": ["../src/class/Country.js", "../src/countriesDefs.js", "../src/const.js", "../src/class/Pattern.js", "../src/index.js"],
  "sourcesContent": ["import iso7064 from \"iso-7064\";\r\nimport countriesDefs from \"../countriesDefs\";\r\nimport { getPattern } from \"./Pattern\";\r\nimport { formatIBAN, validateIBAN } from \"../index\";\r\nimport { validIBAN } from \"../const\";\r\n\r\nconst _cache = {};\r\n\r\nclass Country {\r\n    constructor(countryCode) {\r\n        if (!countryCode) { throw Error(`Missing countryCode`); }\r\n\r\n        const countryRaw = countriesDefs[countryCode];\r\n        if (!countryRaw) { throw Error(`Unknown countryCode '${countryCode}'`); }\r\n\r\n        this.code = countryCode;\r\n        this.label = countryRaw.country;\r\n        this.bank = getPattern(\"bankCode\", countryRaw.bank);\r\n        this.account = getPattern(\"accountCode\", countryRaw.account);\r\n    \r\n    }\r\n\r\n    align(bank, account) {\r\n        return this.bank.align(bank)+this.account.align(account);\r\n    }\r\n\r\n    getIBAN(bank, account, format=false) {\r\n        const bban = this.align(bank, account);\r\n\r\n        const iban = this.code + ('0' + (98 - iso7064.computeWithoutCheck(bban + this.code + '00'))).slice(-2) + bban;\r\n\r\n        return format ? formatIBAN(iban) : iban;\r\n    }\r\n\r\n}\r\n\r\nexport const getCountry = countryCode=>_cache[countryCode] || (_cache[countryCode] = new Country(countryCode));\r\n", "\r\n//n = number\r\n//a = alphanumeric\r\n//c = number or alphanumeric\r\n\r\nexport default {\r\n    \"AD\":{\"country\":\"Andorra\",\"bank\":\"4n 4n\",\"account\":\"12c\"},\r\n    \"AL\":{\"country\":\"Albania\",\"bank\":\"8n\",\"account\":\"16c\"},\r\n    \"AT\":{\"country\":\"Austria\",\"bank\":\"5n\",\"account\":\"11n\"},\r\n    \"BA\":{\"country\":\"Bosnia and Herzegovina\",\"bank\":\"3n 3n\",\"account\":\"8n 2n\"},\r\n    \"BE\":{\"country\":\"Belgium\",\"bank\":\"3n\",\"account\":\"7n 2n\"},\r\n    \"BG\":{\"country\":\"Bulgaria\",\"bank\":\"4a 4n\",\"account\":\"2n 8c\"},\r\n    \"CH\":{\"country\":\"Switzerland\",\"bank\":\"5n\",\"account\":\"12c\"},\r\n    \"CY\":{\"country\":\"Cyprus\",\"bank\":\"3n 5n\",\"account\":\"16c\"},\r\n    \"CZ\":{\"country\":\"Czech Republic\",\"bank\":\"4n\",\"account\":\"16n\"},\r\n    \"DE\":{\"country\":\"Germany\",\"bank\":\"8n\",\"account\":\"10n\"},\r\n    \"DK\":{\"country\":\"Denmark\",\"bank\":\"4n\",\"account\":\"9n 1n\"},\r\n    \"EE\":{\"country\":\"Estonia\",\"bank\":\"2n\",\"account\":\"2n 11n 1n\"},\r\n    \"ES\":{\"country\":\"Spain\",\"bank\":\"4n 4n\",\"account\":\"2n 10n\"},\r\n    \"FI\":{\"country\":\"Finland\",\"bank\":\"6n\",\"account\":\"7n 1n\"},\r\n    \"FO\":{\"country\":\"Faroe Islands\",\"bank\":\"4n\",\"account\":\"9n 1n\"},\r\n    \"FR\":{\"country\":\"France\",\"bank\":\"5n 5n\",\"account\":\"11c 2n\"},\r\n    \"GB\":{\"country\":\"United Kingdom\",\"bank\":\"4a 6n\",\"account\":\"8n\"},\r\n    \"GE\":{\"country\":\"Georgia\",\"bank\":\"2a\",\"account\":\"16n\"},\r\n    \"GI\":{\"country\":\"Gibraltar\",\"bank\":\"4a\",\"account\":\"15c\"},\r\n    \"GL\":{\"country\":\"Greenland\",\"bank\":\"4n\",\"account\":\"9n 1n\"},\r\n    \"GR\":{\"country\":\"Greece\",\"bank\":\"3n 4n\",\"account\":\"16c\"},\r\n    \"HR\":{\"country\":\"Croatia\",\"bank\":\"7n\",\"account\":\"10n\"},\r\n    \"HU\":{\"country\":\"Hungary\",\"bank\":\"3n 4n\",\"account\":\"1n 15n 1n\"},\r\n    \"IE\":{\"country\":\"Ireland\",\"bank\":\"4a 6n\",\"account\":\"8n\"},\r\n    \"IL\":{\"country\":\"Israel\",\"bank\":\"3n 3n\",\"account\":\"13n\"},\r\n    \"IS\":{\"country\":\"Iceland\",\"bank\":\"4n\",\"account\":\"2n 16n\"},\r\n    \"IT\":{\"country\":\"Italy\",\"bank\":\"1a 5n 5n\",\"account\":\"12c\"},\r\n    \"KW\":{\"country\":\"Kuwait\",\"bank\":\"4a\",\"account\":\"22c\"},\r\n    \"KZ\":{\"country\":\"Kazakhstan\",\"bank\":\"3n\",\"account\":\"13c\"},\r\n    \"LB\":{\"country\":\"Lebanon\",\"bank\":\"4n\",\"account\":\"20c\"},\r\n    \"LI\":{\"country\":\"Liechtenstein\",\"bank\":\"5n\",\"account\":\"12c\"},\r\n    \"LT\":{\"country\":\"Lithuania\",\"bank\":\"5n\",\"account\":\"11n\"},\r\n    \"LU\":{\"country\":\"Luxembourg\",\"bank\":\"3n\",\"account\":\"13c\"},\r\n    \"LV\":{\"country\":\"Latvia\",\"bank\":\"4a\",\"account\":\"13c\"},\r\n    \"MC\":{\"country\":\"Monaco\",\"bank\":\"5n 5n\",\"account\":\"11c 2n\"},\r\n    \"ME\":{\"country\":\"Montenegro\",\"bank\":\"3n\",\"account\":\"13n 2n\"},\r\n    \"MK\":{\"country\":\"Macedonia\",\"bank\":\"3n\",\"account\":\"10c 2n\"},\r\n    \"MR\":{\"country\":\"Mauritania\",\"bank\":\"5n 5n\",\"account\":\"11n 2n\"},\r\n    \"MT\":{\"country\":\"Malta\",\"bank\":\"4a 5n\",\"account\":\"18c\"},\r\n    \"MU\":{\"country\":\"Mauritius\",\"bank\":\"4a 4n\",\"account\":\"15n 3a\"},\r\n    \"NL\":{\"country\":\"Netherlands\",\"bank\":\"4a\",\"account\":\"10n\"},\r\n    \"NO\":{\"country\":\"Norway\",\"bank\":\"4n\",\"account\":\"6n 1n\"},\r\n    \"PL\":{\"country\":\"Poland\",\"bank\":\"8n\",\"account\":\"16n\"},\r\n    \"PT\":{\"country\":\"Portugal\",\"bank\":\"4n 4n\",\"account\":\"11n 2n\"},\r\n    \"RO\":{\"country\":\"Romania\",\"bank\":\"4a\",\"account\":\"16c\"},\r\n    \"RS\":{\"country\":\"Serbia\",\"bank\":\"3n\",\"account\":\"13n 2n\"},\r\n    \"SA\":{\"country\":\"Saudi Arabia\",\"bank\":\"2n\",\"account\":\"18c\"},\r\n    \"SE\":{\"country\":\"Sweden\",\"bank\":\"3n\",\"account\":\"16n 1n\"},\r\n    \"SI\":{\"country\":\"Slovenia\",\"bank\":\"5n\",\"account\":\"8n 2n\"},\r\n    \"SK\":{\"country\":\"Slovak Republic\",\"bank\":\"4n\",\"account\":\"16n\"},\r\n    \"SM\":{\"country\":\"San Marino\",\"bank\":\"1a 5n 5n\",\"account\":\"12c\"},\r\n    \"TN\":{\"country\":\"Tunisia\",\"bank\":\"2n 3n\",\"account\":\"13n 2n\"},\r\n    \"TR\":{\"country\":\"Turkey\",\"bank\":\"5n\",\"account\":\"1c 16c\"}\r\n}", "\r\n\r\n\r\nexport const validPatternPart = /^([0-9]+)([anc])$/;\r\n\r\nexport const validIBAN = /^[A-Z]{2}[0-9]{2}[0-9A-Z]{11,30}$/;\r\n\r\nexport const unitsToRegEx = {\r\n    \"a\":\"[A-Z]\",\r\n    \"n\":\"[0-9]\",\r\n    \"c\":\"[A-Z0-9]\"\r\n}", "import { unitsToRegEx, validPatternPart } from \"../const\";\r\n\r\n\r\nconst decodePart = partStr=>{\r\n    const m = partStr.match(validPatternPart);\r\n    if (!m || m.length < 3) { throw Error(`Invalid pattern part '${partStr}'`) }\r\n    return { size:parseInt(m[1]), unit:m[2] };\r\n}\r\n\r\nclass Pattern {\r\n    constructor(label, patternStr) {\r\n\r\n        this.label = label;\r\n        this.patternStr = patternStr;\r\n        this.parts = [];\r\n        this.size = 0;\r\n        this.regexStr = \"\";\r\n    \r\n        for (const partStr of String(patternStr).split(\" \")) {\r\n            const part = decodePart(partStr);\r\n            const { size, unit } = part;\r\n            this.parts.push(part);\r\n            this.size += size;\r\n            this.regexStr += `${unitsToRegEx[unit]}{0,${size}}`;\r\n        }\r\n\r\n        this.regex = new RegExp(\"^\"+this.regexStr+\"$\");\r\n    \r\n    }\r\n\r\n    simplify(value) {\r\n        return String(value || \"\").toUpperCase().replace(/[^A-Z0-9]/g, \"\");\r\n    }\r\n\r\n    validate(value, simplify=true) {\r\n        if (!value) { throw Error(`Missing ${this.label}`); }\r\n        if (simplify) { value = this.simplify(value); }\r\n        const passed = this.regex.test(value);\r\n        return { value, passed }\r\n    }\r\n\r\n    isValid(value, simplify=true) {\r\n        return this.validate(value, simplify).passed;\r\n    }\r\n\r\n    align(value) {\r\n        const vld = this.validate(value, true);\r\n        if (vld.passed) { return vld.value.padStart(this.size, \"0\"); }\r\n        throw Error(`Provided ${this.label} '${value}' doesn't match pattern '${this.patternStr}'`);\r\n    }\r\n}\r\n\r\nexport const getPattern = (label, patternStr)=>new Pattern(label, patternStr);", "import { getCountry } from \"./class/Country\";\nimport { validIBAN } from \"./const\";\n\n\n\nexport const validateIBAN = iban=>{\n    return validIBAN.test(iban);\n}\n\n\nexport const formatIBAN = iban=>{\n    if (!validateIBAN(iban)) { return \"\"; } \n    return String(iban).split('').reduce((a, b) => a + ((a.length + 1) % 5 === 0 ? ' ' : '') + b);\n}\n\n\nexport const getIBAN = (country, bank, account, format=false)=>getCountry(country).getIBAN(bank, account, format);"],
  "mappings": "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",
  "names": ["iso7064", "countriesDefs_default", "validPatternPart", "validIBAN", "unitsToRegEx", "decodePart", "partStr", "m", "validPatternPart", "Pattern", "label", "patternStr", "part", "size", "unit", "unitsToRegEx", "value", "simplify", "passed", "vld", "getPattern", "_cache", "Country", "countryCode", "countryRaw", "countriesDefs_default", "getPattern", "bank", "account", "format", "bban", "iban", "iso7064", "formatIBAN", "getCountry", "validateIBAN", "iban", "validIBAN", "formatIBAN", "a", "b", "getIBAN", "country", "bank", "account", "format", "getCountry"]
}
